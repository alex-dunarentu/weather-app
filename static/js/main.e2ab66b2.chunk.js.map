{"version":3,"sources":["components/weather-condition/weather-conditions.component.jsx","components/locations.js","components/conditions.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherConditions","locationConditions","locationData","className","IsDayTime","src","process","alt","WeatherIcon","LocalizedName","WeatherText","Temperature","Metric","Value","getCity","city","a","queryParams","fetch","response","json","data","getWeather","id","App","useState","location","setLocation","setLocationData","setLocationConditions","console","log","onSubmit","e","preventDefault","then","Key","catch","err","htmlFor","required","type","name","value","onChange","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAuCeA,EArCW,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,mBAAoBC,EAAmB,EAAnBA,aAC/C,OACE,sBAAKC,UAAU,yBAAf,UACGF,EAAmBG,UAClB,qBACEC,IAAKC,8BACLC,IAAI,oBACJJ,UAAU,sBAGZ,qBACEE,IAAKC,gCACLC,IAAI,sBACJJ,UAAU,sBAGd,qBAAKA,UAAU,oCAAf,SACE,qBACEE,IACEC,eAAA,wBACiBL,EAAmBO,YADpC,QAGFD,IAAI,mBAGR,sBAAKJ,UAAU,gDAAf,UACE,oBAAIA,UAAU,OAAd,SAAsBD,EAAaO,gBACnC,qBAAKN,UAAU,OAAf,SAAuBF,EAAmBS,cAC1C,sBAAKP,UAAU,iBAAf,UACE,+BAAOF,EAAmBU,YAAYC,OAAOC,QAC7C,mD,uBCpBKC,EAVF,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,4DAEZ,gEACIC,EAHQ,kBAFJ,mCAEI,cAG0BF,GAH1B,SAKSG,MAHrB,gEAGqCD,GALzB,cAKRE,EALQ,gBAMKA,EAASC,OANd,cAMRC,EANQ,yBAOPA,EAAK,IAPE,2CAAH,sDCSEC,EATC,uCAAG,WAAOC,GAAP,mBAAAP,EAAA,4DACD,2DACVC,EAFW,UAEMM,EAFN,mBAFP,oCAEO,SAIML,MAHP,2DAGuBD,GAJtB,cAIXE,EAJW,gBAKEA,EAASC,OALX,cAKXC,EALW,yBAMVA,EAAK,IANK,2CAAH,sDCuDDG,G,MAnDH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTC,EADS,KACCC,EADD,OAEwBF,mBAAS,IAFjC,mBAETvB,EAFS,KAEK0B,EAFL,OAGoCH,mBAAS,IAH7C,mBAGTxB,EAHS,KAGW4B,EAHX,KAkBhB,OAFAC,QAAQC,IAAI,gBAAiB7B,GAC7B4B,QAAQC,IAAI,sBAAuB9B,GAEjC,qBAAKE,UAAU,MAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,oBAAIA,UAAU,8BAAd,yBACA,uBACEA,UAAU,8CACV6B,SAnBa,SAACC,GACpBA,EAAEC,iBACFpB,EAAQY,GACLS,MAAK,SAACd,GACLO,EAAgBP,GAChBC,EAAWD,EAAKe,KACbD,MAAK,SAACd,GAAD,OAAUQ,EAAsBR,MACrCgB,OAAM,SAACC,GAAD,OAASR,QAAQC,IAAIO,SAE/BD,OAAM,SAACC,GAAD,OAASR,QAAQC,IAAIO,OAQ1B,UAIE,uBAAOC,QAAQ,OAAf,uDAGA,uBACEC,UAAQ,EACRC,KAAK,OACLC,KAAK,OACLC,MAAOjB,EACPkB,SAAU,SAACX,GAAD,OAAON,EAAYM,EAAEY,OAAOF,QACtCxC,UAAU,wBAGbF,EAAmBU,YAClB,cAAC,EAAD,CACEV,mBAAoBA,EACpBC,aAAcA,IAGhB,UCtCK4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e2ab66b2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst WeatherConditions = ({ locationConditions, locationData }) => {\r\n  return (\r\n    <div className=\"card shadow-lg rounded\">\r\n      {locationConditions.IsDayTime ? (\r\n        <img\r\n          src={process.env.PUBLIC_URL + `/images/day.svg`}\r\n          alt=\"is day time image\"\r\n          className=\"time card-img-top\"\r\n        />\r\n      ) : (\r\n        <img\r\n          src={process.env.PUBLIC_URL + `/images/night.svg`}\r\n          alt=\"is night time image\"\r\n          className=\"time card-img-top\"\r\n        />\r\n      )}\r\n      <div className=\"icon bg-light mx-auto text-center\">\r\n        <img\r\n          src={\r\n            process.env.PUBLIC_URL +\r\n            `/images/icons/${locationConditions.WeatherIcon}.svg`\r\n          }\r\n          alt=\"weather icon\"\r\n        />\r\n      </div>\r\n      <div className=\"text-muted text-uppercase text-center details\">\r\n        <h5 className=\"my-3\">{locationData.LocalizedName}</h5>\r\n        <div className=\"my-3\">{locationConditions.WeatherText}</div>\r\n        <div className=\"display-4 my-4\">\r\n          <span>{locationConditions.Temperature.Metric.Value}</span>\r\n          <span>&deg;C</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherConditions;\r\n","const key = \"aOsBHyQvSHxPd9wsZZIZKW8HADHivovt\";\r\n\r\nconst getCity = async (city) => {\r\n  const baseURL =\r\n    \"http://dataservice.accuweather.com/locations/v1/cities/search\";\r\n  const queryParams = `?apikey=${key}&q=${city}`;\r\n\r\n  const response = await fetch(baseURL + queryParams);\r\n  const data = await response.json();\r\n  return data[0];\r\n};\r\n\r\nexport default getCity;\r\n","const key = \"aOsBHyQvSHxPd9wsZZIZKW8HADHivovt\";\r\n\r\nconst getWeather = async (id) => {\r\n  const baseURL = \"http://dataservice.accuweather.com/currentconditions/v1/\";\r\n  const queryParams = `${id}?apikey=${key}`;\r\n\r\n  const response = await fetch(baseURL + queryParams);\r\n  const data = await response.json();\r\n  return data[0];\r\n};\r\n\r\nexport default getWeather;\r\n","import React, { useState } from \"react\";\nimport WeatherConditions from \"./components/weather-condition/weather-conditions.component.jsx\";\nimport getCity from \"./components/locations.js\";\nimport getWeather from \"./components/conditions\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [location, setLocation] = useState(\"\");\n  const [locationData, setLocationData] = useState({});\n  const [locationConditions, setLocationConditions] = useState({});\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    getCity(location)\n      .then((data) => {\n        setLocationData(data);\n        getWeather(data.Key)\n          .then((data) => setLocationConditions(data))\n          .catch((err) => console.log(err));\n      })\n      .catch((err) => console.log(err));\n  };\n  console.log(\"location data\", locationData);\n  console.log(\"location conditions\", locationConditions);\n  return (\n    <div className=\"App\">\n      <div className=\"container mx-5 mx-auto\">\n        <h1 className=\"text-muted text-center my-4\">Weather App</h1>\n        <form\n          className=\"change-location my-4 text-center text-muted\"\n          onSubmit={handleSubmit}\n        >\n          <label htmlFor=\"city\">\n            Enter a location for weather information:\n          </label>\n          <input\n            required\n            type=\"text\"\n            name=\"city\"\n            value={location}\n            onChange={(e) => setLocation(e.target.value)}\n            className=\"form-control p-4\"\n          />\n        </form>\n        {locationConditions.Temperature ? (\n          <WeatherConditions\n            locationConditions={locationConditions}\n            locationData={locationData}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}